use std::collections::{BTreeMap, BTreeSet, HashMap, HashSet, VecDeque};
use std::ffi::OsString;
use std::io::{Read, Write};
use std::path::{Path, PathBuf};

use from_as::*;
use futures_util::SinkExt;

use futures_util::StreamExt;
use graph_codegen::api_types::{
    MethodMacro, ModFile, ModFileWriter, ModWriteConfiguration, WriteConfiguration,
};
use graph_codegen::api_types::{ModFileWriterBuilder, WriteConfigurationBuilder};
use graph_codegen::inflector::Inflector;
use graph_codegen::macros::OpenApiParser;
use graph_codegen::openapi::*;
use graph_codegen::settings::{
    get_me_filter, get_write_configuration, ApiClientLink, ResourceSettings, ResourceSettingsMap,
};
use graph_codegen::traits::{HashSetExt, RequestParser};
use graph_core::resource::ResourceIdentity;
use graph_error::WithGraphErrorAsync;
use graph_http::odata_query::ODataQuery;
use graph_http::{DownloadTask, FileConfig};
use graph_rs_sdk::client::Graph;
use test_tools::oauthrequest::OAuthTestClient;
use test_tools::support::cleanup::CleanUp;

fn gen_config() {
    OpenApi::write_all(vec![
        //get_write_configuration(ResourceIdentity::Policies),
        get_write_configuration(ResourceIdentity::Events),
        get_write_configuration(ResourceIdentity::EventsInstances),
        get_write_configuration(ResourceIdentity::UsersMessages),
        get_write_configuration(ResourceIdentity::CalendarView),
    ]);
}

fn print_path_all() {
    find_path_all(vec!["sites", "groups"]);
}

fn test_path_contains() {
    let write_config = get_write_configuration(ResourceIdentity::TermStoreSetsChildren);
    let mut open_api = OpenApi::default();

    if let Some(trim_path_start) = write_config.trim_path_start {
        println!("write config path: {:#?}", trim_path_start.as_str());
        open_api.paths = open_api.filter_path(trim_path_start.as_str());
    }

    println!("After filter_path");

    for (path, _path_item) in open_api.paths() {
        println!("{path:#?}");
    }

    for path in write_config.filter_path.iter() {
        //open_api.paths = open_api.filter_path_not_contains(path.as_str());
        println!("Searching for path: {path:#?}");
        open_api.paths = open_api.filter_path_not_contains(path);
    }

    println!("\nAfter filter_path_contains");
    for (path, path_item) in open_api.paths.iter() {
        println!("{path:#?}");
        //println!("{path_item:#?}");
    }
}

/*
async fn test_json() {
    std::env::set_var("GRAPH_TEST_ENV", "true");
    if let Some((_id, client)) = OAuthTestClient::ClientCredentials.graph_async().await {
        let request = client.users();

        let vec = request
            .list_user()
            .select(&["id", "userPrincipalName"])
            .top("2")
            .json_next_links::<serde_json::Value>()
            .await
            .unwrap();
        for (url, status, headers, json, option_error) in vec.iter() {
            println!("Url: {url:#?}\nStatus: {status:#?}\nHeaders: {headers:#?}\nbody: {json:#?}");
        }
    }
}

async fn test_json2() {
    std::env::set_var("GRAPH_TEST_ENV", "true");
    if let Some((_id, client)) = OAuthTestClient::ClientCredentials.graph_async().await {
        let request = client.users();

        let vec = request
            .list_user()
            .select(&["id", "userPrincipalName"])
            .top("2")
            .json_next_links2::<serde_json::Value>()
            .await
            .unwrap();
        for response in vec.iter() {
            println!("{:#?}\n{:#?}\n{:#?}", response.0, response.1, response.2);
        }
    }
}


 */
async fn test_stream() {
    std::env::set_var("GRAPH_TEST_ENV", "true");
    if let Some((_id, client)) = OAuthTestClient::ClientCredentials.graph_async().await {
        let request = client.users();

        let mut stream = request
            .list_user()
            .select(&["id", "userPrincipalName"])
            .top("2")
            .stream_next_links::<serde_json::Value>()
            .unwrap();

        while let Some(next_link_response) = stream.next().await {
            println!("{:#?}", next_link_response);
        }
    }
}

/*
   std::env::set_var("GRAPH_TEST_ENV", "true");
   if let Some((_id, token)) = OAuthTestClient::ClientCredentials
       .request_access_token_async()
       .await
   {
       let client = Graph::new(token.as_ref());
       let mut recv = client
           .users()
           .list_user()
           .select(&["id", "userPrincipalName"])
           .top("2")
           .channel_next_links::<serde_json::Value>()
           .await
           .unwrap();

       while let Some(response) = recv.recv().await {
           println!("{:#?}\n{:#?}\n{:#?}", response.1, response.2, response.3);
       }
   }
*/

#[tokio::main]
async fn main() {
    //second_level_write_configuration3();
    //test_path_parameters();
    //find_path("sites");
    //gen_config();

    //print_first_second_level_resources("groups");
    // "01MKWN4TGNWXPXIGRZMVFJ6WZR5HV3T4PG"
    std::env::set_var("GRAPH_TEST_ENV", "true");
    if let Some((id, client)) = OAuthTestClient::ClientCredentials.graph_async().await {
        let response = client
            .user(id.as_str())
            .default_drive()
            .item("01MKWN4TGNWXPXIGRZMVFJ6WZR5HV3T4PG")
            .checkin(&serde_json::json!({
                        "comment": "test check in async",
                    }))
            .send()
            .await
            .unwrap();

        println!("{:#?}", response);
        let body: serde_json::Value = response.json().await.unwrap();
        println!("{:#?}", body);

       // assert!(response.status().is_success());
    }

   /*
   .checkin(&serde_json::json!({
                        "comment": "test check in async",
                    }))

   if let Ok(res) = get_item_res {
            //let res = res.with_graph_error().await.unwrap();
            dbg!(&res);
            let body: serde_json::Value = res.json().await.unwrap();
            assert!(body["id"].as_str().is_some());
            let item_id = body["id"].as_str().unwrap();

            let response = client
                .user(id.as_str())
                .default_drive()
                .item(item_id)
                .list_versions()
                .send()
                .await
                .unwrap();

            assert!(response.status().is_success());
        } else if let Err(e) = get_item_res {
            panic!("Request Error. Method: drive get_item. Error: {:#?}", e);
        }

    let client = Graph::new("");
    let url = client.user("id")
        .default_drive()
        .item("item-id")
        .get_items()
        .url();
    println!("{:#?}", url);

    let url = client
        .user("user-id")
        .default_drive()
        .item_by_path(":/copy_folder:")
        .get_items()
        .url();
    println!("{:#?}", url);
    */

    //OpenApi::write(get_write_configuration(ResourceIdentity::DefaultCalendar));
    //gen_config();
    //print_path_all();
    //find_path("instances");

    // println!("{:#?}", get_write_configuration(ResourceIdentity::EventsInstances));
    //gen_config();
    //OpenApi::write(get_write_configuration(ResourceIdentity::Events));
    //test_path_contains();
    /*
    OpenApi::write(
        WriteConfiguration::second_level_builder(
            ResourceIdentity::Users,
            ResourceIdentity::Settings,
        )
        .filter_path(get_me_child_filters(ResourceIdentity::Settings))
        .trim_path_start("/users/{user-id}")
        .build()
        .unwrap(),
    );
     */

}


/*
fn get_method_macros_with_same_fn_name() {
    let set = OpenApi::get_metadata_method_macros(
        WriteConfiguration::second_level_builder(
            ResourceIdentity::Users,
            ResourceIdentity::ChatsMessages,
        )
            .trim_path_start("/users/{user-id}/chats/{chat-id}")
            .filter_path(get_me_child_filters(ResourceIdentity::ChatsMessages))
            .build()
            .unwrap(),
    );

    let mut same_method_name_map: HashMap<String, VecDeque<MethodMacro>> = HashMap::new();

    for method_macro in set.iter() {
        let mut v = VecDeque::new();
        v.push_back(method_macro.clone());
        same_method_name_map
            .entry(method_macro.fn_name.clone())
            .and_modify(|mut v| v.push_back(method_macro.clone()))
            .or_insert(v);
    }

    for (_fn_name, method_macro) in same_method_name_map.iter() {
        if method_macro.len() > 1 {
            dbg!(method_macro);
        }
    }
}
 */

async fn download() {
    std::env::set_var("GRAPH_TEST_ENV", "true");
    if let Some((id, client)) = OAuthTestClient::ClientCredentials.graph_async().await {
        let drive_id = "b!xgUA5jylTk20enJJC0dsEQ1KX9ItwEpPvtXpbHLPWOLQIXvEKuWiR5OPhh16xC9-";
        let file_id = "01MKWN4TBOP24LJGFKKZFKMFJEA6YHMWTV";
        // .download(":/test_document.docx:", "./test_files");
        let result = client
            .drive(id.as_str())
            .item(":/test_document.docx:/")
            .get_items_content_by_file()
            .format("pdf")
            .send()
            .await;
        if let Ok(res) = result {
            println!("{:#?}", res);

            // println!("{:#?}", &t);
            res.download(FileConfig {
                path: PathBuf::from("./test_files"),
                create_directory_all: false,
                overwrite_existing_file: false,
                file_name: Some(OsString::from("test_document.pdf")),
                extension: None,
            })
            .await
            .unwrap();
        } else if let Err(err) = result {
            println!("{:#?}", err);
        }
    }
}

pub fn reverse(input: &str) -> String {
    input.chars().rev().collect()
}

pub fn find_path(path: &str) {
    let mut open_api = OpenApi::default();
    let paths = open_api.filter_path_contains(path);
    for (path, _) in paths.iter() {
        println!("{path:#?}");
    }
}

pub fn find_path_all(path: Vec<&str>) {
    let mut open_api = OpenApi::default();
    let vec = open_api.filter_path_contains_all(path);
    for map in vec.iter() {
        println!("\n\n");
        for (path, _) in map.iter() {
            println!("{path:#?}");
        }
    }
}

pub fn find_start_path(path: &str) {
    let mut open_api = OpenApi::default();
    let paths = open_api.filter_path(path);
    for (path, _) in paths.iter() {
        println!("{path:#?}");
    }
}

pub fn find_first_path(pat: &str) {
    let open_api = OpenApi::default();
    let paths = open_api.filter_path_contains(pat);
    let mut set: HashSet<String> = HashSet::new();
    for (path, _) in paths.iter() {
        let path_arr: Vec<&str> = path.split('/').filter(|s| !s.trim().is_empty()).collect();
        if path_arr.len() > 1 && !path_arr[1].contains('{') {
            set.insert(path_arr[1].to_string());
        }
    }

    println!("{set:#?}");
}

pub fn print_top_level_resources() {
    let open_api = OpenApi::default();
    let set = open_api.top_level_resources();
    println!("{set:#?}");
}

pub fn print_first_second_level_resources(pat: &str) {
    let open_api = OpenApi::default();
    let set = open_api.first_second_level_resources(pat);
    println!("{set:#?}");
}

fn second_level_to_string() {
    let open_api = OpenApi::default();
    let v = open_api.first_second_level_resources("deviceAppManagement");
    //let v3: BTreeSet<String> = v.iter().map(|s| format!("{}{} =>", ResourceIdentity::DeviceAppManagement.enum_string(), s.to_pascal_case())).collect();
    let v2: BTreeSet<String> = v
        .iter()
        .map(|s| {
            format!(
                "{}{} => self.replace(&device_am, \"\").to_camel_case(),",
                ResourceIdentity::DeviceAppManagement.enum_string(),
                s.to_pascal_case()
            )
        })
        .collect();
    //ResourceIdentity::DeviceAppManagementAndroidManagedAppProtections.enum_string().replace("DeviceAppManagement", "").to_snake_case();
    // vec!["deviceAppManagementAndroidManagedAppProtections".into()]
    let v3: BTreeSet<String> = v
        .iter()
        .map(|s| format!("\"{}\".into(),", s.to_camel_case()))
        .collect();

    let mut s = String::from("vec![");
    for s1 in v3.iter() {
        s.push_str(s1.as_ref());
    }
    s.push_str("]");
    println!("{}", s);
}

fn second_level_write_configuration() {
    let open_api = OpenApi::default();
    let v = open_api.first_second_level_resources("deviceManagement");

    // format!("\"DeviceAppManagement{}\".into(),", s.to_pascal_case()).to_snake_case()
    let v3: BTreeSet<String> = v
        .iter()
        .map(|s| {
            format!(
                r#"{} => WriteConfiguration::second_level_builder(ResourceIdentity::DeviceManagement, resource_identity)
			.trim_path_start("/deviceManagement")
			.build()
			.unwrap(),
	"#,
                format!(
                    "ResourceIdentity::{}",
                    s.to_pascal_case()
                ),
            )
        })
        .collect();

    for s1 in v3.iter() {
        print!("{}", s1);
    }
}

fn second_level_write_configuration3() {
    let open_api = OpenApi::default();
    let v = open_api.first_second_level_resources("deviceManagement");

    // format!("\"DeviceAppManagement{}\".into(),", s.to_pascal_case()).to_snake_case()
    let v3: BTreeSet<String> = v
        .iter()
        .map(|s| format!("ResourceIdentity::{} |\n", s.to_pascal_case()))
        .collect();

    /*
                format!(
                r#"{} => WriteConfiguration::second_level_builder(ResourceIdentity::DeviceManagement, resource_identity)
            .trim_path_start("/deviceManagement")
            .build()
            .unwrap(),
    "#,
                format!(
                    "ResourceIdentity::{} |\n",
                    s.to_pascal_case()
                ),
            )
     */

    for s1 in v3.iter() {
        print!("{}", s1);
    }
}

fn second_level_write_configuration2() {
    let open_api = OpenApi::default();
    let v = open_api.first_second_level_resources("deviceAppManagement");

    // format!("\"DeviceAppManagement{}\".into(),", s.to_pascal_case()).to_snake_case()
    let v3: BTreeSet<String> = v
        .iter()
        .map(|s| {
            format!(
                "ResourceIdentity::DeviceAppManagement{}, ",
                s.to_pascal_case()
            )
        })
        .collect();

    let mut s = String::from("vec![");
    for s1 in v3.iter() {
        s.push_str(s1.as_ref());
    }
    s.push_str("]");
    println!("{}", s);
}

fn get_diff() {
    let open_api = OpenApi::default();
    let mut groups = open_api.first_second_level_resources("groups");
    let mut me = open_api.first_second_level_resources("me");
    //let mut users = open_api.first_second_level_resources("users");

    let mut diff: Vec<_> = groups.intersection(&me).cloned().collect();
    me.extend(diff.iter().map(|s| s.to_string()));
    //println!("{:#?}\n", me);
    //println!("{:#?}\n", groups);

    println!("{:#?}", me);
}

fn test_first_second_level() {
    let mut open_api = OpenApi::default();
    let mut paths = open_api.filter_path("/me");

    let mut set: BTreeSet<String> = BTreeSet::new();
    //let mut deque: VecDeque<String> = VecDeque::new();

    for (path, _) in paths.iter() {
        let mut path_arr: VecDeque<String> = path
            .split('/')
            .filter(|s| !s.trim().is_empty())
            .filter(|s| !s.contains(['{', '(', '.', '$']))
            .map(|s| s.to_string())
            .collect();

        if path_arr.len() > 0 {
            path_arr.pop_front();
        }

        if let Some(value) = path_arr.pop_front() {
            set.insert(value);
        }
    }
}

fn write_builder() {
    let s = get_me_filter();
    let mut set = BTreeSet::new();

    set.extend(s);

    let mut builder = String::new();

    for s1 in set.iter() {
        let ri = format!("{},\n", s1.to_pascal_case());
        builder.push_str(ri.as_ref());
    }

    for s1 in set.iter() {
        let ri = format!("ResourceIdentity::{},\n", s1.to_pascal_case());
        builder.push_str(ri.as_ref());
    }

    println!("{}", builder);
}

/*
async fn test_graph() {
    std::env::set_var("GRAPH_TEST_ENV", "true");
    if let Some((user_id, access_token)) = OAuthTestClient::ClientCredentials
        .request_access_token_async()
        .await
    {
        let client = GraphV2::new(access_token.bearer_token());

        let request = client.users().id(user_id).get_drive().send().await.unwrap();

        println!("{:#?}", request);
        println!("{:#?}", request.json::<serde_json::Value>().await.unwrap());
    }
}

 */

/*
fn test_path_parameters() {
    let client = GraphV2::new("token").me();
    let path = client.me_export_device_and_app_management_data("3", "2");
    println!("{:#?}", path.url().path());
}
    OpenApi::write_all(map_shared_write_config(vec![
        ResourceIdentity::Activities,
        ResourceIdentity::AgreementAcceptances,
        ResourceIdentity::AppRoleAssignments,
        ResourceIdentity::Authentication,
        ResourceIdentity::Calendar,
        ResourceIdentity::CalendarGroups,
        ResourceIdentity::CalendarView,
        ResourceIdentity::Calendars,
        ResourceIdentity::Chats,
        ResourceIdentity::ContactFolders,
        ResourceIdentity::Contacts,
        ResourceIdentity::CreatedObjects,
        ResourceIdentity::DeviceManagementTroubleshootingEvents,
        ResourceIdentity::DirectReports,
        ResourceIdentity::Drives,
        ResourceIdentity::Events,
        ResourceIdentity::Extensions,
        ResourceIdentity::FollowedSites,
        ResourceIdentity::InferenceClassification,
        ResourceIdentity::Insights,
        ResourceIdentity::JoinedTeams,
        ResourceIdentity::LicenseDetails,
        ResourceIdentity::MailFolders,
        ResourceIdentity::ManagedAppRegistrations,
        ResourceIdentity::ManagedDevices,
        ResourceIdentity::MemberOf,
        ResourceIdentity::Messages,
        ResourceIdentity::Oauth2PermissionGrants,
        ResourceIdentity::Onenote,
        ResourceIdentity::OnlineMeetings,
        ResourceIdentity::Outlook,
        ResourceIdentity::OwnedDevices,
        ResourceIdentity::OwnedObjects,
        ResourceIdentity::People,
        ResourceIdentity::Photos,
        ResourceIdentity::Planner,
        ResourceIdentity::Presence,
        ResourceIdentity::RegisteredDevices,
        ResourceIdentity::ScopedRoleMemberOf,
        ResourceIdentity::Teamwork,
        ResourceIdentity::Todo,
        ResourceIdentity::TransitiveMemberOf,
    ]));

        let me = vec![
    ResourceIdentity::Activities,
    ResourceIdentity::AgreementAcceptances,
    ResourceIdentity::AppRoleAssignments,
    ResourceIdentity::Authentication,
    ResourceIdentity::Calendar,
    ResourceIdentity::CalendarGroups,
    ResourceIdentity::CalendarView,
    ResourceIdentity::Calendars,
    ResourceIdentity::Chats,
    ResourceIdentity::ContactFolders,
    ResourceIdentity::Contacts,
    ResourceIdentity::CreatedObjects,
    ResourceIdentity::DeviceManagementTroubleshootingEvents,
    ResourceIdentity::DirectReports,
    ResourceIdentity::Drives,
    ResourceIdentity::Events,
    ResourceIdentity::Extensions,
    ResourceIdentity::FollowedSites,
    ResourceIdentity::InferenceClassification,
    ResourceIdentity::Insights,
    ResourceIdentity::JoinedTeams,
    ResourceIdentity::LicenseDetails,
    ResourceIdentity::MailFolders,
    ResourceIdentity::ManagedAppRegistrations,
    ResourceIdentity::ManagedDevices,
    //ResourceIdentity::MemberOf,
    //ResourceIdentity::Messages,
    ResourceIdentity::Oauth2PermissionGrants,
    ResourceIdentity::Onenote,
    ResourceIdentity::OnlineMeetings,
    ResourceIdentity::Outlook,
    ResourceIdentity::OwnedDevices,
    ResourceIdentity::OwnedObjects,
    ResourceIdentity::People,
    ResourceIdentity::Photos,
    ResourceIdentity::Planner,
    ResourceIdentity::Presence,
    ResourceIdentity::RegisteredDevices,
    ResourceIdentity::ScopedRoleMemberOf,
    ResourceIdentity::Teamwork,
    ResourceIdentity::Todo,
    ResourceIdentity::TransitiveMemberOf,
];

for ri in me.iter() {
    println!("pub use {}::*;", ri.exact_snake_case());
}
*/
//let right = get_write_configuration(ResourceIdentity::GroupLifecyclePolicies);

//println!("{:#?}", right);

//get_diff();
//  find_path("instances");

/*
    ResourceIdentity::Activities,
ResourceIdentity::AgreementAcceptances,
ResourceIdentity::AppRoleAssignments,
ResourceIdentity::Authentication,
ResourceIdentity::Calendar,
ResourceIdentity::CalendarGroups,
ResourceIdentity::CalendarView,
ResourceIdentity::Calendars,
ResourceIdentity::Chats,
ResourceIdentity::ContactFolders,
ResourceIdentity::Contacts,
ResourceIdentity::CreatedObjects,
ResourceIdentity::DeviceManagementTroubleshootingEvents,
ResourceIdentity::DirectReports,
ResourceIdentity::Drives,
ResourceIdentity::Events,
ResourceIdentity::Extensions,
ResourceIdentity::FollowedSites,
ResourceIdentity::InferenceClassification,
ResourceIdentity::Insights,
ResourceIdentity::JoinedTeams,
ResourceIdentity::LicenseDetails,
ResourceIdentity::MailFolders,
ResourceIdentity::ManagedAppRegistrations,
ResourceIdentity::ManagedDevices,
ResourceIdentity::MemberOf,
ResourceIdentity::Messages,
ResourceIdentity::Oauth2PermissionGrants,
ResourceIdentity::Onenote,
ResourceIdentity::OnlineMeetings,
ResourceIdentity::Outlook,
ResourceIdentity::OwnedDevices,
ResourceIdentity::OwnedObjects,
ResourceIdentity::People,
ResourceIdentity::Photos,
ResourceIdentity::Planner,
ResourceIdentity::Presence,
ResourceIdentity::RegisteredDevices,
ResourceIdentity::ScopedRoleMemberOf,
ResourceIdentity::Teamwork,
ResourceIdentity::Todo,
ResourceIdentity::TransitiveMemberOf,


        let write_config = WriteConfiguration::second_level_builder(
        ResourceIdentity::DeviceAppManagement,
        ResourceIdentity::DeviceAppManagementTargetedManagedAppConfigurations,
    );


    println!("{:#?}", write_config)
    println!(
        "{:#?}",
        get_write_configuration(ResourceIdentity::DeviceAppManagement)
    );
    let folder = "device_app_management/android_managed_app_protections";
    println!("{}", format!("./src/{folder}/mod.rs"));

    OpenApi::write(get_write_configuration(
        ResourceIdentity::DeviceAppManagement,
    ));
    OpenApi::write(get_write_configuration(
        ResourceIdentity::Threads,
    ));

     */

//get_diff();
//print_first_second_level_resources("groups");
//second_level_write_configuration();
//println!("{:#?}", ResourceIdentity::DeviceAppManagementAndroidManagedAppProtections.to_string());

/*
let s = get_me_filter();
let mut set = BTreeSet::new();

set.extend(s);

let mut builder = String::new();


for s1 in set.iter() {
    let ri = format!("SharedClient{},\n", s1.to_pascal_case());
    builder.push_str(ri.as_ref());
}



for s1 in set.iter() {
    let ri = format!("ResourceIdentity::SharedClient{},\n", s1.to_pascal_case());
    builder.push_str(ri.as_ref());
}


println!("{}", builder);
let s = format!(r#"{} => WriteConfigurationBuilder::default()
        .path(resource_identity.to_path_start())
        .resource_identity(resource_identity)
        .mod_file(ModFile::base_mod("device_app_management/{}"))
        .replace_operation_map(resource_identity.replace("deviceAppManagement", "").to_camel_case())
        .trim_path_start("/deviceAppManagement")
        .build()
        .unwrap(),
"#, "", "");


        ResourceIdentity::DeviceAppManagementAndroidManagedAppProtections => WriteConfigurationBuilder::default()
        .path(resource_identity.to_path_start())
        .resource_identity(resource_identity)
        .mod_file(ModFile::base_mod("device_app_management/device_app_management_android_managed_app_protections"))
        .replace_operation_map(resource_identity.replace("deviceAppManagement", "").to_camel_case())
        .trim_path_start("/deviceAppManagement")
        .build()
        .unwrap(),

           ResourceIdentity::DeviceAppManagementAndroidManagedAppProtections => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementDefaultManagedAppProtections => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementIosManagedAppProtections => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementManagedAppPolicies => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementManagedAppRegistrations => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementManagedAppStatuses => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementManagedEBooks => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementMdmWindowsInformationProtectionPolicies => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementMobileAppCategories => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementMobileAppConfigurations => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementMobileApps => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementTargetedManagedAppConfigurations => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementVppTokens => self.replace(&device_am, "").to_camel_case(),
       ResourceIdentity::DeviceAppManagementWindowsInformationProtectionPolicies => self.replace(&device_am, "").to_camel_case(),
*/

//let json: serde_json::Value = serde_json::from_str(&"{ \"value\": [ }").unwrap();

//find_path("managedAppRegistration");
//print_first_second_level_resources("deviceAppManagement");

/*
    let client = GraphV2::new("token");
let url = client.identity_governance()
    .access_reviews()
    .definition("accessReviewDefinition-id")
    .get_definitions()
    .send()
    .await;

println!("{:#?}", url);
let client = GraphV2::new("");
let url = client.identity_governance()
    .access_reviews()
    .definition("accessReviewDefinition-id")
    .get_definitions()
    .url();


println!("{:#?}", url);
 */

//find_path("accessPackageAssignmentApprovals");
/*
  OpenApi::write(get_write_configuration(
     ResourceIdentity::IdentityGovernance,
 ));
let mut write_config = get_write_configuration(ResourceIdentity::IdentityGovernance);
 write_config.implement_children_mods();
 println!("{:#?}", write_config);
     let wn = WriteConfigurationBuilder::default()
     .modifier_name("identityGovernance".to_string())
     .path("/identityGovernance".to_string())
     .resource_identity(ResourceIdentity::IdentityGovernance)
     .filter_path(vec!["entitlementManagement".into(), "accessReviews".into()])
     .replace_operation_map("identityGovernance".to_string())
     .mod_file_writer(ModFileWriterBuilder::default()
         .file("src/identity_governance/mod.rs")
         .declarations(HashSet::from_vec(vec![
             "access_review_definitions", "access_reviews", "access_packages",
         ])).build().unwrap())
     .children(vec![
         get_write_configuration(ResourceIdentity::AccessReviewDefinitions),
         get_write_configuration(ResourceIdentity::AccessReviews),
         get_write_configuration(ResourceIdentity::AccessPackages),
         get_write_configuration(ResourceIdentity::ConnectedOrganizations),
         get_write_configuration(ResourceIdentity::EntitlementManagement),
     ])
     .build()
     .unwrap();

 println!("{:#?}", wn);

  OpenApi::write(get_write_configuration(
     ResourceIdentity::IdentityGovernance,
 ));

 let client = GraphV2::new("token");

 let url = client.device_management()
     .terms_and_condition("id")
     .create_assignments(&serde_json::json!({}))
     .url();
 println!("{:#?}", url);
  */

/*


        ResourceIdentity::IdentityGovernance => WriteConfiguration {
            modifier_name: Some("identityGovernance".to_string()),
            path: "/identityGovernance".to_string(),
            resource_identity,
            trim_path_start: None,
            filter_path: vec!["entitlementManagement".into(), "accessReviews".into()],
            replace_operation_map: Some("identityGovernance".into()),
            parameter_filter: vec![],
            mod_file_writer: Some(ModFileWriter::new(
                "src/identity_governance/mod.rs".to_string(),
                vec![
                    "access_review_definitions".into(),
                    "access_reviews".into(),
                    "access_packages".into(),
                    "connected_organizations".into(),
                    "entitlement_management".into(),
                    "request".into(),
                ],
            )),
            mod_write_override: None,
            children: vec![
                get_write_configuration(ResourceIdentity::AccessReviewDefinitions),
                get_write_configuration(ResourceIdentity::AccessReviews),
                get_write_configuration(ResourceIdentity::AccessPackages),
                get_write_configuration(ResourceIdentity::ConnectedOrganizations),
                get_write_configuration(ResourceIdentity::EntitlementManagement),
            ],
        },

                            "access_package_assignment_approvals".into(),
                    "access_review_definitions".into(),
                    "access_reviews".into(),
                    "access_packages".into(),
                    "connected_organizations".into(),
                    "entitlement_management".into(),

callRecords
    //                 start_filter: Filter::PathStartsWith("/communications/calls".into()),
    //                 modifier: "calls".to_string(),

    OpenApi::write(ResourceParsingInfo {
        modifier_name: Some("accessPackages".to_string()),
        path: "/accessPackages".to_string(),
        resource_identity: ResourceIdentity::AccessPackages,
        trim_path_start: Some("/identityGovernance/entitlementManagement".to_string()),
        parameter_filter: vec![],
    });

   // let mut open_api = OpenApi::default();
   // assignment_policies_assignment_approvals();
   let r1 = ResourceSettings::new(ResourceIdentity::AccessPackages);
   let r2 = ResourceSettings::new(ResourceIdentity::AccessPackageAssignmentApprovals);
   let r3 = ResourceSettings::new(ResourceIdentity::AssignmentPolicies);
   let mut map = BTreeMap::new();

   map.insert(ResourceIdentity::AccessPackages, r1);
   map.insert(ResourceIdentity::AccessPackageAssignmentApprovals, r2);
   map.insert(ResourceIdentity::AssignmentPolicies, r3);

   let resource_settings_map = ResourceSettingsMap(map);
   resource_settings_map
       .as_file_pretty(
           "./graph-codegen/src/settings/resource_settings_json/resource_settings.json",
       )
       .unwrap();


               ResourceIdentity::SharedClient => WriteConfigurationBuilder::default()
            .resource_identity(resource_identity)
            .mod_file(ModFile::Declarations { file: "src/shared_client/mod.rs".to_string(), declarations: vec![] })
            .children(map_shared_write_config(vec![
                ResourceIdentity::Activities,
                ResourceIdentity::AgreementAcceptances,
                ResourceIdentity::AppRoleAssignments,
                ResourceIdentity::Authentication,
                ResourceIdentity::SharedClientCalendar,
                ResourceIdentity::SharedClientCalendarGroups,
                ResourceIdentity::SharedClientCalendarView,
                ResourceIdentity::SharedClientCalendars,
                ResourceIdentity::SharedClientChats,
                ResourceIdentity::SharedClientContactFolders,
                ResourceIdentity::SharedClientContacts,
                ResourceIdentity::SharedClientCreatedObjects,
                ResourceIdentity::SharedClientDeviceManagementTroubleshootingEvents,
                ResourceIdentity::SharedClientDirectReports,
                ResourceIdentity::SharedClientDrives,
                ResourceIdentity::SharedClientEvents,
                ResourceIdentity::SharedClientExtensions,
                ResourceIdentity::SharedClientFollowedSites,
                ResourceIdentity::SharedClientInferenceClassification,
                ResourceIdentity::SharedClientInsights,
                ResourceIdentity::SharedClientJoinedTeams,
                ResourceIdentity::SharedClientLicenseDetails,
                ResourceIdentity::SharedClientMailFolders,
                ResourceIdentity::SharedClientManagedAppRegistrations,
                ResourceIdentity::SharedClientManagedDevices,
                ResourceIdentity::SharedClientMemberOf,
                ResourceIdentity::SharedClientMessages,
                ResourceIdentity::SharedClientOauth2PermissionGrants,
                ResourceIdentity::SharedClientOnenote,
                ResourceIdentity::SharedClientOnlineMeetings,
                ResourceIdentity::SharedClientOutlook,
                ResourceIdentity::SharedClientOwnedDevices,
                ResourceIdentity::SharedClientOwnedObjects,
                ResourceIdentity::SharedClientPeople,
                ResourceIdentity::SharedClientPhotos,
                ResourceIdentity::SharedClientPlanner,
                ResourceIdentity::SharedClientPresence,
                ResourceIdentity::SharedClientRegisteredDevices,
                ResourceIdentity::SharedClientScopedRoleMemberOf,
                ResourceIdentity::SharedClientTeamwork,
                ResourceIdentity::SharedClientTodo,
                ResourceIdentity::SharedClientTransitiveMemberOf,
            ]))
            .build()
            .unwrap(),
*/
